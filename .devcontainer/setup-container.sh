#!/bin/bash

# Script de inicializaci√≥n del contenedor
# Ejecutado al crear el devcontainer

set -e

echo "üîß Configurando devcontainer..."

# Asegurar permisos correctos
sudo chown -R vscode:vscode /workspace
chmod +x /workspace/scripts/*.sh

# Instalar pre-commit si no est√° disponible
echo "üì¶ Verificando instalaci√≥n de pre-commit..."
export PATH="$HOME/.local/bin:$PATH"
if ! command -v pre-commit &> /dev/null; then
    echo "üì• Instalando pre-commit..."
    pip3 install --user pre-commit
    echo "‚úÖ Pre-commit instalado correctamente"
else
    echo "‚úÖ Pre-commit ya est√° instalado"
fi

# Configurar pre-commit
if [[ -f "/workspace/.pre-commit-config.yaml" ]]; then
    echo "ÔøΩ Configurando hooks de pre-commit..."
    cd /workspace
    export PATH="$HOME/.local/bin:$PATH"

    # Instalar hooks para commits regulares
    echo "üì¶ Instalando hook pre-commit..."
    pre-commit install

    # Instalar hooks para mensajes de commit
    echo "üìù Instalando hook para mensajes de commit..."
    pre-commit install --hook-type commit-msg

    # Verificar que los hooks est√©n instalados
    if [[ -f ".git/hooks/pre-commit" ]]; then
        echo "‚úÖ Hook pre-commit instalado correctamente"
    else
        echo "‚ö†Ô∏è  Warning: No se pudo verificar la instalaci√≥n del hook pre-commit"
    fi

    if [[ -f ".git/hooks/commit-msg" ]]; then
        echo "‚úÖ Hook commit-msg instalado correctamente"
    else
        echo "‚ö†Ô∏è  Warning: No se pudo verificar la instalaci√≥n del hook commit-msg"
    fi

    # Cachear hooks para primera ejecuci√≥n m√°s r√°pida
    echo "‚ö° Cacheando hooks..."
    pre-commit run --all-files || echo "‚ö†Ô∏è  Algunos hooks fallaron pero est√°n instalados"

    echo "‚úÖ Pre-commit hooks activados - se ejecutar√°n autom√°ticamente en cada commit"
else
    echo "‚ö†Ô∏è  No se encontr√≥ .pre-commit-config.yaml, saltando configuraci√≥n de hooks"
fi

# Configurar TFLint plugins
echo "üîç Inicializando TFLint plugins con configuraci√≥n AWS..."
if [[ -f "/workspace/.tflint.hcl" ]]; then
    cd /workspace/calavia-eks-infra
    cp ../.tflint.hcl ./.tflint.hcl
    echo "üì¶ Descargando plugin AWS para TFLint..."
    if tflint --init --config=.tflint.hcl; then
        echo "‚úÖ Plugin AWS de TFLint inicializado correctamente"
    else
        echo "‚ö†Ô∏è  TFLint init fall√≥, se ejecutar√° en primer uso"
    fi
    rm -f .tflint.hcl  # Limpiar archivo temporal
fi

# Crear configuraci√≥n de Terraform
echo "üèóÔ∏è Configurando Terraform..."
mkdir -p ~/.terraform.d
cat > ~/.terraformrc << 'EOF'
plugin_cache_dir   = "$HOME/.terraform.d/plugin-cache"
disable_checkpoint = true
EOF

mkdir -p ~/.terraform.d/plugin-cache

# Instalar hadolint para linting de Dockerfiles
echo "üì¶ Instalando hadolint..."
if ! command -v hadolint &> /dev/null; then
    # Detectar arquitectura del sistema
    ARCH=$(uname -m)
    case $ARCH in
        x86_64)
            HADOLINT_ARCH="x86_64"
            ;;
        aarch64|arm64)
            HADOLINT_ARCH="arm64"
            ;;
        *)
            echo "‚ö†Ô∏è  Arquitectura no soportada: $ARCH, usando x86_64 por defecto"
            HADOLINT_ARCH="x86_64"
            ;;
    esac

    echo "üì• Descargando hadolint para arquitectura: $HADOLINT_ARCH"
    curl -sL -o /tmp/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-${HADOLINT_ARCH}"
    chmod +x /tmp/hadolint
    sudo mv /tmp/hadolint /usr/local/bin/hadolint
    echo "‚úÖ Hadolint instalado correctamente"
else
    echo "‚úÖ Hadolint ya est√° instalado"
fi

echo "‚úÖ Devcontainer configurado correctamente"

# Verificar que pre-commit est√© funcionando
echo "üîç Verificando configuraci√≥n de pre-commit..."
export PATH="$HOME/.local/bin:$PATH"
cd /workspace

if command -v pre-commit &> /dev/null; then
    echo "‚úÖ Pre-commit disponible: $(pre-commit --version)"

    # Verificar que los hooks est√©n instalados
    if [[ -f ".git/hooks/pre-commit" ]]; then
        echo "‚úÖ Hook pre-commit activo - se ejecutar√° en cada commit"
    else
        echo "‚ùå Hook pre-commit no est√° instalado"
    fi

    if [[ -f ".git/hooks/commit-msg" ]]; then
        echo "‚úÖ Hook commit-msg activo - validar√° mensajes de commit"
    else
        echo "‚ùå Hook commit-msg no est√° instalado"
    fi
else
    echo "‚ùå Pre-commit no est√° disponible en PATH"
fi
