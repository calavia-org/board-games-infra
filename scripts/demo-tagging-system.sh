#!/bin/bash

# Demo del Sistema de Tagging Completo
# Muestra las capacidades del sistema de tagging profesional
# Autor: DevOps Team - Calavia Gaming Platform
# Versi√≥n: 1.0.0

set -euo pipefail

# Configuraci√≥n
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Funciones auxiliares
log_header() {
    echo -e "\n${WHITE}============================================${NC}"
    echo -e "${WHITE}$1${NC}"
    echo -e "${WHITE}============================================${NC}\n"
}

log_section() {
    echo -e "\n${CYAN}üîπ $1${NC}"
    echo "-----------------------------------"
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_step() {
    echo -e "${PURPLE}‚ñ∂${NC} $1"
}

pause_for_demo() {
    if [[ "${1:-}" != "--no-pause" ]]; then
        echo -e "\n${YELLOW}Press Enter to continue...${NC}"
        read -r
    fi
}

# Funci√≥n principal de demo
main() {
    local interactive_mode="true"

    # Parsear argumentos
    if [[ "${1:-}" == "--no-pause" ]]; then
        interactive_mode="false"
    fi

    clear

    log_header "üè∑Ô∏è  DEMO: SISTEMA DE TAGGING COMPLETO Y PROFESIONAL"

    echo -e "${CYAN}Board Games Infrastructure - Calavia Gaming Platform${NC}"
    echo -e "${CYAN}Sistema de tagging empresarial para control de costes y mantenimiento${NC}"
    echo
    echo "Este sistema proporciona:"
    echo "  ‚úÖ Tagging consistente y centralizado"
    echo "  ‚úÖ Control de costes granular"
    echo "  ‚úÖ Compliance autom√°tico"
    echo "  ‚úÖ Auditor√≠a y reportes"
    echo "  ‚úÖ Automatizaci√≥n de mantenimiento"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 1: ARQUITECTURA DEL SISTEMA
    # ===============================================

    log_header "üìê ARQUITECTURA DEL SISTEMA DE TAGGING"

    log_section "M√≥dulo Centralizado de Tags"
    echo "Ubicaci√≥n: calavia-eks-infra/modules/tags/"
    echo
    echo "Estructura del m√≥dulo:"
    echo "  üìÅ modules/tags/"
    echo "    ‚îú‚îÄ‚îÄ üìÑ main.tf       - L√≥gica principal de tagging"
    echo "    ‚îú‚îÄ‚îÄ üìÑ variables.tf  - Variables configurables"
    echo "    ‚îú‚îÄ‚îÄ üìÑ outputs.tf    - Outputs para diferentes usos"
    echo "    ‚îî‚îÄ‚îÄ üìÑ README.md     - Documentaci√≥n completa"

    pause_for_demo "$interactive_mode"

    log_section "Taxonom√≠a de Tags Implementada"

    echo -e "${WHITE}üî¥ TAGS OBLIGATORIOS (Required):${NC}"
    echo "  ‚Ä¢ Environment (production|staging|development|testing)"
    echo "  ‚Ä¢ Project (nombre del proyecto)"
    echo "  ‚Ä¢ Owner (email del responsable)"
    echo "  ‚Ä¢ CostCenter (centro de coste)"
    echo "  ‚Ä¢ ManagedBy (herramienta de gesti√≥n)"
    echo

    echo -e "${WHITE}üü° TAGS DE NEGOCIO (Business):${NC}"
    echo "  ‚Ä¢ BusinessUnit (unidad de negocio)"
    echo "  ‚Ä¢ Department (departamento responsable)"
    echo "  ‚Ä¢ Purpose (prop√≥sito del recurso)"
    echo "  ‚Ä¢ Criticality (nivel de criticidad)"
    echo

    echo -e "${WHITE}üü¢ TAGS T√âCNICOS (Technical):${NC}"
    echo "  ‚Ä¢ Component (tipo de componente)"
    echo "  ‚Ä¢ Service (servicio AWS)"
    echo "  ‚Ä¢ Version (versi√≥n del recurso)"
    echo "  ‚Ä¢ Architecture (arquitectura del sistema)"
    echo

    echo -e "${WHITE}üîµ TAGS DE LIFECYCLE (Lifecycle):${NC}"
    echo "  ‚Ä¢ CreatedBy (usuario/proceso que cre√≥)"
    echo "  ‚Ä¢ CreatedDate (fecha de creaci√≥n)"
    echo "  ‚Ä¢ ExpiryDate (fecha de vencimiento)"
    echo "  ‚Ä¢ MaintenanceWindow (ventana de mantenimiento)"
    echo

    echo -e "${WHITE}üü£ TAGS DE COSTES (Cost Management):${NC}"
    echo "  ‚Ä¢ BillingProject (proyecto de facturaci√≥n)"
    echo "  ‚Ä¢ BudgetAlerts (alertas de presupuesto)"
    echo "  ‚Ä¢ CostOptimization (candidato para optimizaci√≥n)"
    echo "  ‚Ä¢ ReservedInstance (candidato para RI)"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 2: EJEMPLOS DE USO
    # ===============================================

    log_header "üíº EJEMPLOS DE USO DEL SISTEMA"

    log_section "Ejemplo 1: Base de Datos PostgreSQL en Producci√≥n"

    cat << 'EOF'
module "db_tags" {
  source = "../../modules/tags"

  environment  = "production"
  owner_email  = "database@calavia.org"
  component    = "database"
  purpose      = "primary-game-database"
  criticality  = "critical"

  additional_tags = {
    Engine           = "postgresql"
    EngineVersion    = "14.9"
    BackupRetention  = "7-days"
    MultiAZ          = "true"
    StorageEncrypted = "true"
  }
}

resource "aws_db_instance" "game_db" {
  identifier = "game-db-production"
  # ... configuraci√≥n ...

  tags = module.db_tags.enriched_tags
}
EOF

    pause_for_demo "$interactive_mode"

    log_section "Ejemplo 2: Cl√∫ster EKS con Tags Especializados"

    cat << 'EOF'
module "eks_tags" {
  source = "../../modules/tags"

  environment  = "production"
  owner_email  = "platform@calavia.org"
  component    = "container-orchestration"
  purpose      = "kubernetes-cluster"
  criticality  = "critical"

  additional_tags = {
    KubernetesVersion = "1.27"
    NodeGroups       = "3"
    AutoScaling      = "enabled"
    Monitoring       = "enhanced"
  }
}

resource "aws_eks_cluster" "main" {
  name = "gaming-cluster-prod"
  # ... configuraci√≥n ...

  tags = module.eks_tags.tags
}
EOF

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 3: HERRAMIENTAS DE GESTI√ìN
    # ===============================================

    log_header "üõ†Ô∏è  HERRAMIENTAS DE GESTI√ìN DE TAGS"

    log_section "1. Script de Compliance de Tags"

    show_step "Generando reporte de compliance..."
    echo
    echo "Comando: ./scripts/tag-compliance-report.sh --format table"
    echo
    echo "Funcionalidades:"
    echo "  ‚úÖ Auditor√≠a autom√°tica de recursos AWS"
    echo "  ‚úÖ Verificaci√≥n de tags obligatorios"
    echo "  ‚úÖ Reportes en m√∫ltiples formatos (HTML, JSON, CSV)"
    echo "  ‚úÖ Integraci√≥n con email y Slack"
    echo "  ‚úÖ Filtrado por environment y tipo de recurso"

    echo
    echo "Ejemplo de salida:"
    echo "============================================"
    echo "üè∑Ô∏è  TAG COMPLIANCE REPORT"
    echo "============================================"
    echo "Total Resources: 127"
    echo "Compliant: 119"
    echo "Non-Compliant: 8"
    echo "Compliance Rate: 94%"
    echo
    echo "NON-COMPLIANT RESOURCES:"
    echo "========================"
    echo "AWS::RDS::DBInstance"
    echo "  ARN: arn:aws:rds:us-west-2:123456789012:db:legacy-db"
    echo "  Missing Tags: Environment, Owner, CostCenter"
    echo

    pause_for_demo "$interactive_mode"

    log_section "2. Auto-Tagger para Recursos Existentes"

    show_step "Aplicando tags autom√°ticamente..."
    echo
    echo "Comando: ./scripts/auto-tagger.sh --environment production --owner devops@calavia.org"
    echo
    echo "Capacidades:"
    echo "  ‚úÖ Tagging autom√°tico de recursos existentes"
    echo "  ‚úÖ Modo dry-run para simulaci√≥n"
    echo "  ‚úÖ Filtrado por tipo de recurso"
    echo "  ‚úÖ Validaci√≥n de par√°metros"
    echo "  ‚úÖ Soporte para m√∫ltiples servicios AWS"

    echo
    echo "Servicios soportados:"
    echo "  ‚Ä¢ AWS RDS (Databases)"
    echo "  ‚Ä¢ AWS EKS (Kubernetes)"
    echo "  ‚Ä¢ AWS ElastiCache (Cache)"
    echo "  ‚Ä¢ AWS EC2 (Compute)"
    echo "  ‚Ä¢ AWS ELB (Load Balancers)"
    echo "  ‚Ä¢ ... y m√°s"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 4: CONTROL DE COSTES
    # ===============================================

    log_header "üí∞ INTEGRACI√ìN CON CONTROL DE COSTES"

    log_section "AWS Cost Explorer - Filtros por Tags"

    echo "Los tags permiten an√°lisis granular de costes:"
    echo
    echo "Por Environment:"
    echo "  aws ce get-cost-and-usage --group-by Type=TAG,Key=Environment"
    echo
    echo "Por Component:"
    echo "  aws ce get-cost-and-usage --group-by Type=TAG,Key=Component"
    echo
    echo "Por Owner/Team:"
    echo "  aws ce get-cost-and-usage --group-by Type=TAG,Key=Owner"
    echo
    echo "Por Cost Center:"
    echo "  aws ce get-cost-and-usage --group-by Type=TAG,Key=CostCenter"

    pause_for_demo "$interactive_mode"

    log_section "Infracost - An√°lisis con Tags"

    echo "Tags integrados en estimaciones de costes:"
    echo
    show_step "Ejemplo de an√°lisis con Infracost:"

    cat << 'EOF'
Project: board-games-infrastructure

 Name                                    Monthly Qty  Unit    Monthly Cost

 module.production.aws_db_instance.main
 ‚îú‚îÄ Database instance (on-demand, db.t3.medium)     730  hours      $30.37
 ‚îú‚îÄ Storage (general purpose SSD, gp2)               20  GB          $2.30
 ‚îî‚îÄ Tags: Environment=production, Component=database,
          Owner=database@calavia.org, Criticality=critical

 module.staging.aws_eks_cluster.main
 ‚îú‚îÄ EKS cluster                                        1  months     $73.00
 ‚îî‚îÄ Tags: Environment=staging, Component=k8s,
          Owner=platform@calavia.org, Criticality=medium

 TOTAL                                                            $1,314.25
EOF

    pause_for_demo "$interactive_mode"

    log_section "AWS Budgets - Alertas por Tags"

    echo "Presupuestos configurados autom√°ticamente por tags:"
    echo
    echo "  üéØ Production Environment: \$1,500/mes"
    echo "     ‚Ä¢ Filtro: Environment=production"
    echo "     ‚Ä¢ Alertas: 80% y 100%"
    echo
    echo "  üß™ Staging Environment: \$500/mes"
    echo "     ‚Ä¢ Filtro: Environment=staging"
    echo "     ‚Ä¢ Alertas: 80% y 100%"
    echo
    echo "  üíæ Database Components: \$400/mes"
    echo "     ‚Ä¢ Filtro: Component=database"
    echo "     ‚Ä¢ Alertas: 90% y 100%"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 5: AUTOMATION Y BEST PRACTICES
    # ===============================================

    log_header "ü§ñ AUTOMATIZACI√ìN Y MEJORES PR√ÅCTICAS"

    log_section "CI/CD Integration"

    echo "Integraci√≥n autom√°tica en pipelines:"
    echo
    echo "1. Pre-commit hooks:"
    echo "   ‚Ä¢ Validaci√≥n de tags en Terraform"
    echo "   ‚Ä¢ Verificaci√≥n de compliance"
    echo
    echo "2. GitHub Actions:"
    echo "   ‚Ä¢ An√°lisis autom√°tico en PRs"
    echo "   ‚Ä¢ Reportes de compliance"
    echo "   ‚Ä¢ Alertas de costes"
    echo
    echo "3. Terraform validation:"
    echo "   ‚Ä¢ Variables obligatorias"
    echo "   ‚Ä¢ Validaci√≥n de formatos"
    echo "   ‚Ä¢ Consistencia entre entornos"

    pause_for_demo "$interactive_mode"

    log_section "Pol√≠ticas de Tagging (AWS Organizations)"

    echo "Tag Policies para enforcement autom√°tico:"
    echo

    cat << 'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Deny",
      "Action": [
        "ec2:RunInstances",
        "rds:CreateDBInstance",
        "eks:CreateCluster"
      ],
      "Resource": "*",
      "Condition": {
        "Null": {
          "aws:RequestTag/Environment": "true",
          "aws:RequestTag/Owner": "true",
          "aws:RequestTag/CostCenter": "true"
        }
      }
    }
  ]
}
EOF

    pause_for_demo "$interactive_mode"

    log_section "Lambda Auto-Tagger"

    echo "Funci√≥n Lambda para tagging autom√°tico:"
    echo
    echo "Triggers:"
    echo "  ‚Ä¢ CloudTrail events"
    echo "  ‚Ä¢ Recursos nuevos creados"
    echo "  ‚Ä¢ Recursos sin tags completos"
    echo
    echo "Acciones autom√°ticas:"
    echo "  ‚Ä¢ Aplicar tags base (CreatedBy, CreatedDate)"
    echo "  ‚Ä¢ Inferir tags desde contexto"
    echo "  ‚Ä¢ Notificar recursos sin compliance"
    echo "  ‚Ä¢ Integrar con sistemas de ticketing"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 6: M√âTRICAS Y KPIS
    # ===============================================

    log_header "üìä M√âTRICAS Y KPIs DEL SISTEMA"

    log_section "KPIs de Tagging"

    echo "M√©tricas principales monitoreadas:"
    echo
    echo "  üìà Compliance Rate: 94% (Objetivo: >95%)"
    echo "  üí∞ Cost Allocation: 89% (Objetivo: >90%)"
    echo "  ü§ñ Automation Rate: 76% (Objetivo: >80%)"
    echo "  üîÑ Lifecycle Management: 82% (Objetivo: >85%)"
    echo

    echo "Dashboard disponible en:"
    echo "  ‚Ä¢ AWS Cost Explorer con filtros por tags"
    echo "  ‚Ä¢ Reportes HTML autom√°ticos"
    echo "  ‚Ä¢ Grafana dashboard (pr√≥ximamente)"
    echo "  ‚Ä¢ Slack notifications diarias"

    pause_for_demo "$interactive_mode"

    log_section "Alertas Configuradas"

    echo "Sistema de alertas automatizado:"
    echo
    echo "  ‚ö†Ô∏è  Compliance < 95%"
    echo "     ‚Ä¢ Frecuencia: Diaria"
    echo "     ‚Ä¢ Acci√≥n: Email + Ticket autom√°tico"
    echo
    echo "  üö® Cost Allocation < 90%"
    echo "     ‚Ä¢ Frecuencia: Semanal"
    echo "     ‚Ä¢ Acci√≥n: Reporte + Escalaci√≥n"
    echo
    echo "  üìä New Resources sin tags"
    echo "     ‚Ä¢ Frecuencia: Tiempo real"
    echo "     ‚Ä¢ Acci√≥n: Auto-tag + Notificaci√≥n"
    echo
    echo "  üìà Tendencia incremental > 20%"
    echo "     ‚Ä¢ Frecuencia: Semanal"
    echo "     ‚Ä¢ Acci√≥n: An√°lisis + Recomendaciones"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # SECCI√ìN 7: ROADMAP Y PR√ìXIMOS PASOS
    # ===============================================

    log_header "üöÄ ROADMAP Y PR√ìXIMOS PASOS"

    log_section "Implementado ‚úÖ"

    echo "  ‚úÖ M√≥dulo centralizado de tagging"
    echo "  ‚úÖ Scripts de compliance y auto-tagging"
    echo "  ‚úÖ Integraci√≥n con Infracost"
    echo "  ‚úÖ AWS Budgets autom√°ticos"
    echo "  ‚úÖ Reportes HTML/JSON/CSV"
    echo "  ‚úÖ Validaci√≥n en Terraform"
    echo "  ‚úÖ Documentaci√≥n completa"

    pause_for_demo "$interactive_mode"

    log_section "En Desarrollo üöß"

    echo "  üöß Lambda auto-tagger"
    echo "  üöß Tag Policies (AWS Organizations)"
    echo "  üöß Grafana dashboard"
    echo "  üöß API REST para integraci√≥n"
    echo "  üöß Mobile notifications"

    pause_for_demo "$interactive_mode"

    log_section "Pr√≥ximas Mejoras üìã"

    echo "  üìã Machine Learning para predicci√≥n de costes"
    echo "  üìã Integraci√≥n con JIRA/ServiceNow"
    echo "  üìã Multi-cloud support (Azure, GCP)"
    echo "  üìã Advanced analytics con BI tools"
    echo "  üìã Compliance scoring autom√°tico"

    pause_for_demo "$interactive_mode"

    # ===============================================
    # FINAL: RESUMEN Y CONTACTO
    # ===============================================

    log_header "üéØ RESUMEN Y SIGUIENTES PASOS"

    echo -e "${GREEN}‚úÖ Sistema de Tagging Completamente Implementado${NC}"
    echo
    echo "El sistema proporciona:"
    echo "  ‚Ä¢ Tagging consistente y profesional"
    echo "  ‚Ä¢ Control de costes granular y automatizado"
    echo "  ‚Ä¢ Compliance autom√°tico con reportes"
    echo "  ‚Ä¢ Herramientas de gesti√≥n y auditor√≠a"
    echo "  ‚Ä¢ Integraci√≥n completa con CI/CD"
    echo
    echo -e "${CYAN}Pr√≥ximos pasos recomendados:${NC}"
    echo
    echo "1. üöÄ Desplegar infraestructura con nuevo sistema de tags"
    echo "   terraform plan && terraform apply"
    echo
    echo "2. üìä Configurar reportes autom√°ticos"
    echo "   ./scripts/tag-compliance-report.sh --format html --email devops@calavia.org"
    echo
    echo "3. üè∑Ô∏è  Aplicar tags a recursos existentes"
    echo "   ./scripts/auto-tagger.sh --environment production --owner devops@calavia.org"
    echo
    echo "4. üìà Configurar alertas y monitoreo"
    echo "   ./scripts/setup-aws-budgets.sh"
    echo
    echo "5. ü§ñ Integrar en pipelines CI/CD"
    echo "   A√±adir validation de tags en GitHub Actions"
    echo

    echo -e "\n${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${WHITE}üìû CONTACTO Y SOPORTE${NC}"
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
    echo "  üë• Equipo DevOps: devops@calavia.org"
    echo "  üí∞ Finanzas: finance@calavia.org"
    echo "  üì± Slack: #infrastructure-tagging"
    echo "  üìö Docs: /TAGGING.md, /INFRACOST.md"
    echo
    echo -e "${GREEN}¬°Sistema listo para producci√≥n! üéÆüöÄ${NC}"
    echo
}

# Ejecutar demo
main "$@"
