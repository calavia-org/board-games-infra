name: Infrastructure Validation

# Ejecutar en push a main y staging, y en todos los pull requests
on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]

# Configuraci√≥n de permisos para security scanning
permissions:
  contents: read
  security-events: write
  id-token: write

# Variables de entorno globales
env:
  TERRAFORM_VERSION: "1.6.6"
  TFLINT_VERSION: "0.49.0"
  TRIVY_VERSION: "0.48.3"

jobs:
  # Job 1: Validaci√≥n r√°pida de sintaxis y formato
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para pre-commit

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Initialize TFLint plugins
        run: |
          echo "üì¶ Inicializando plugins de TFLint..."
          cd calavia-eks-infra
          cp ../.tflint.hcl ./.tflint.hcl

          # Inicializar plugin AWS
          if tflint --init --config=.tflint.hcl; then
            echo "‚úÖ Plugin AWS de TFLint inicializado"

            # Verificar que las reglas AWS est√°n disponibles
            if tflint --list-rules --config=.tflint.hcl | grep -q "aws_"; then
              echo "‚úÖ Reglas AWS detectadas correctamente"
            else
              echo "‚ö†Ô∏è  Warning: Reglas AWS no detectadas"
            fi
          else
            echo "‚ùå Error inicializando TFLint plugins"
            exit 1
          fi

          rm -f .tflint.hcl  # Limpiar archivo temporal

      - name: Cache Terraform modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            **/.terraform
          key: terraform-${{ hashFiles('**/*.tf', '**/*.tfvars') }}
          restore-keys: |
            terraform-

      - name: Install Pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache Pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Cache TFLint plugins
        uses: actions/cache@v3
        with:
          path: |
            ~/.tflint.d/
            .tflint-cache/
            **/.tflint.d/
          key: tflint-${{ hashFiles('.tflint*.hcl') }}-plugins
          restore-keys: |
            tflint-plugins-

      - name: Setup Pre-commit Scripts
        run: |
          # Hacer ejecutables los scripts personalizados
          chmod +x scripts/hooks/*.sh scripts/verify-environment.sh

          # Crear directorio de cach√© para terraform-validate
          mkdir -p .terraform-validate-cache

          # Verificar que los scripts funcionan correctamente
          echo "‚úÖ Verificando terraform-validate-wrapper..."
          ./scripts/hooks/terraform-validate-wrapper.sh 2>/dev/null || echo "Script configurado"

          echo "‚úÖ Verificando tflint-wrapper..."
          ./scripts/hooks/tflint-wrapper.sh --version 2>/dev/null || echo "Script configurado"

          echo "‚úÖ Verificando trivy-wrapper..."
          ./scripts/hooks/trivy-wrapper.sh --version 2>/dev/null || echo "Script configurado"

      - name: Run Pre-commit Hooks
        run: |
          # Instalar hooks de pre-commit
          pre-commit install

          # Ejecutar todos los hooks en archivos modificados
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # En PR, solo archivos modificados
            pre-commit run --from-ref origin/${{ github.base_ref }} --to-ref HEAD
          else
            # En push a main/staging, todos los archivos
            pre-commit run --all-files
          fi

      # Subir artefactos para debugging
      - name: Upload Terraform Cache Info
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-cache-info
          path: |
            .terraform-validate-cache/
            .tflint-cache/
          retention-days: 1

  # Job 2: Security scanning completo (solo en cambios importantes)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quick-validation
    if: github.event_name == 'push' || contains(github.event.pull_request.changed_files, '.tf')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Trivy
        run: |
          # Instalar Trivy
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz | tar xz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Run Trivy Security Scan
        run: |
          chmod +x scripts/hooks/trivy-wrapper.sh

          # Ejecutar scan completo de infraestructura
          ./scripts/hooks/trivy-wrapper.sh --format sarif --output trivy-results.sarif .

          # Tambi√©n generar reporte legible
          ./scripts/hooks/trivy-wrapper.sh --format table .

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
          category: infrastructure-security

  # Job 3: Terraform plan y validation por entorno
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    strategy:
      matrix:
        environment: [staging, production]
        include:
          - environment: staging
            aws_region: us-west-2
          - environment: production
            aws_region: us-west-2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('AWS_ROLE_{0}', matrix.environment)] }}
          aws-region: ${{ matrix.aws_region }}
          role-session-name: github-actions-terraform-${{ matrix.environment }}

      - name: Terraform Init
        working-directory: calavia-eks-infra/environments/${{ matrix.environment }}
        run: |
          terraform init -backend=true

      - name: Terraform Validate (Fast)
        working-directory: calavia-eks-infra/environments/${{ matrix.environment }}
        run: |
          # Usar el wrapper personalizado para validaci√≥n r√°pida
          chmod +x ../../../scripts/hooks/terraform-validate-wrapper.sh
          ../../../scripts/hooks/terraform-validate-wrapper.sh

      - name: Terraform Plan
        working-directory: calavia-eks-infra/environments/${{ matrix.environment }}
        run: |
          terraform plan -detailed-exitcode -no-color -out=tfplan
        continue-on-error: true
        id: plan

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan - ${{ matrix.environment }} üèóÔ∏è

            <details><summary>Show Plan Output</summary>

            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Job 4: Documentaci√≥n y cleanup
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, '*.md') || contains(github.event.pull_request.changed_files, 'README')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ".github/package-lock.json"

      - name: Lint Markdown
        run: |
          # Instalar markdownlint-cli si no existe package.json
          npm install -g markdownlint-cli

          # Verificar documentaci√≥n
          markdownlint README.md docs/*.md || true

          # Verificar que todos los archivos .tf tengan README.md
          find . -name "*.tf" -path "*/modules/*" | while read -r tf_file; do
            module_dir=$(dirname "$tf_file")
            if [[ ! -f "$module_dir/README.md" ]]; then
              echo "‚ùå Falta README.md en: $module_dir"
              exit 1
            fi
          done

  # Configuraci√≥n de notificaciones
  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs:
      [
        quick-validation,
        security-scan,
        terraform-validation,
        documentation-check,
      ]
    if: always()

    steps:
      - name: Workflow Status
        run: |
          echo "üîç Quick Validation: ${{ needs.quick-validation.result }}"
          echo "üîí Security Scan: ${{ needs.security-scan.result }}"
          echo "üèóÔ∏è Terraform Validation: ${{ needs.terraform-validation.result }}"
          echo "üìö Documentation Check: ${{ needs.documentation-check.result }}"

          # Fallar si alg√∫n job cr√≠tico fall√≥
          if [[ "${{ needs.quick-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.terraform-validation.result }}" == "failure" ]]; then
            echo "‚ùå Pipeline failed - critical jobs failed"
            exit 1
          fi

          echo "‚úÖ Pipeline completed successfully"
